// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCClient is the client API for GRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCClient interface {
	GetNumbers(ctx context.Context, in *GetNumbersInput, opts ...grpc.CallOption) (*GetNumbersOutput, error)
}

type gRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCClient(cc grpc.ClientConnInterface) GRPCClient {
	return &gRPCClient{cc}
}

func (c *gRPCClient) GetNumbers(ctx context.Context, in *GetNumbersInput, opts ...grpc.CallOption) (*GetNumbersOutput, error) {
	out := new(GetNumbersOutput)
	err := c.cc.Invoke(ctx, "/grpc.GRPC/GetNumbers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCServer is the server API for GRPC service.
// All implementations must embed UnimplementedGRPCServer
// for forward compatibility
type GRPCServer interface {
	GetNumbers(context.Context, *GetNumbersInput) (*GetNumbersOutput, error)
	mustEmbedUnimplementedGRPCServer()
}

// UnimplementedGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCServer struct {
}

func (UnimplementedGRPCServer) GetNumbers(context.Context, *GetNumbersInput) (*GetNumbersOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumbers not implemented")
}
func (UnimplementedGRPCServer) mustEmbedUnimplementedGRPCServer() {}

// UnsafeGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCServer will
// result in compilation errors.
type UnsafeGRPCServer interface {
	mustEmbedUnimplementedGRPCServer()
}

func RegisterGRPCServer(s grpc.ServiceRegistrar, srv GRPCServer) {
	s.RegisterService(&GRPC_ServiceDesc, srv)
}

func _GRPC_GetNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumbersInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCServer).GetNumbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.GRPC/GetNumbers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCServer).GetNumbers(ctx, req.(*GetNumbersInput))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPC_ServiceDesc is the grpc.ServiceDesc for GRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.GRPC",
	HandlerType: (*GRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNumbers",
			Handler:    _GRPC_GetNumbers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPC.proto",
}
